{"version":3,"sources":["logo.png","components/Jumbotron/Jumbotron.js","components/Navbar/Navbar.js","components/Card/Card.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Jumbotron","react_default","a","createElement","className","id","src","logo","class","alt","Navbar","_ref","message","score","topScore","Card","clickHandler","image","name","onClick","Footer","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSaveClick","cardz","state","cards","cardClicked","filter","card","clicked","handleIncorrectClick","handleCorrectClick","randomizeImages","setState","images","sort","b","Math","random","isGuessCorrect","maxScore","messageClass","resetGame","i","length","_this2","_this$state","Jumbotron_Jumbotron","Navbar_Navbar","map","Card_Card","key","Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cd98ead.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5a91baa2.png\";","import React from \"react\";\r\nimport logo from \"../../logo.png\";\r\n\r\nfunction Jumbotron () {\r\n    return (\r\n        <div className=\"jumbotron img-fluid justify-content-center\">\r\n        <img id=\"logo\" src={logo} class=\"rounded mx-auto d-block\" alt=\"Logo\" />\r\n        </div>\r\n       );\r\n};\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\n\r\nfunction Navbar({ message, score, topScore }) {\r\n  return (\r\n      \r\n    <nav className=\"bg-nav  navbar\">\r\n\r\n        <div class=\"navbar-fixed\">\r\n    \r\n            <nav>\r\n                <div class=\"nav-wrapper\">\r\n                    <div className=\"col list-inline-item my-auto nav-calc-font m-0 p-0 text-center\">\r\n                        {/* <h4>Click All 15 Images to Win</h4>  */}\r\n                        {message}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n        </div>\r\n\r\n        <div className=\"col list-inline-item my-auto nav-calc-font m-0 p-0 score-li-width text-center\">\r\n            SCORE: {score} |  HIGH SCORE: {topScore}\r\n        </div>\r\n\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","\r\nimport React from \"react\";\r\n\r\nfunction Card({ clickHandler, id, image, name }) {\r\n  return (\r\n    <div className=\"card-holder\">\r\n      <img\r\n        src={image}\r\n        alt={name}\r\n        className=\"card-select grow img-thumbnail m-2 pointer\"\r\n        onClick={() => clickHandler(id)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nfunction Footer () {\r\n    return (\r\n        <footer>\r\n            <div className=\"copyright\">Brittney Armentrout &copy; 2019 </div>\r\n        </footer>\r\n       \r\n       );\r\n};\r\n\r\nexport default Footer;","import React, { Component } from \"react\";\n\nimport Jumbotron from \"./components/Jumbotron\";\nimport Navbar from \"./components/Navbar\";\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport cards from \"./cards.json\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isGuessCorrect: true,\n      cards: cards,\n      score: 0,\n      maxScore: 15,\n      topScore: 0,\n      message: \"CLICK A DISC GOLFER TO BEGIN\"\n    };\n  }\n\n  //Functions for game logic\n\n  //Main click handler function\n  handleSaveClick = id => {\n    // Variable to hold the cards state.\n    const cardz = this.state.cards;\n    // Search through character cards to find the one that matches the clicked id.\n    const cardClicked = cardz.filter(card => card.id === id);\n\n    // If the card isn't clicked...\n    if (!cardClicked[0].clicked) {\n      // ...set it to now be clicked\n      cardClicked[0].clicked = true;\n      // ...call this function to register the correct guess\n      this.handleCorrectClick();\n\n      // ... randomize image cards\n      this.randomizeImages(cardz);\n\n      this.setState({ cardz });\n    } else {\n      this.handleIncorrectClick();\n    }\n  };\n\n  //Function to randomize the images\n  randomizeImages = images => {\n    images.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n  };\n\n  //Handler for correct guesses/clicks\n  handleCorrectClick = () => {\n    this.setState({ isGuessCorrect: true });\n    if (this.state.score + 1 > this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 });\n    }\n    if (this.state.score + 1 >= this.state.maxScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"CONGRATS! YOU WIN!\",\n        messageClass: \"correct\"\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"YOU GUESSED CORRECTLY!\",\n        messageClass: \"correct\"\n      });\n    }\n  };\n\n  //Handler for incorrect guesses/clicks\n  handleIncorrectClick = () => {\n    this.setState({\n      message: \"INCORRECT. CLICK TO PLAY AGAIN!\",\n      isGuessCorrect: false\n    });\n    this.resetGame();\n  };\n\n  //Resets the game\n  resetGame = id => {\n    const cardz = this.state.cards;\n    for (let i = 0; i < cardz.length; i++) {\n      cardz[i].clicked = false;\n    }\n    this.setState({ score: 0 });\n  };\n\n  //Render the App components on the page\n  render() {\n    const { message, score, cards, topScore } = this.state;\n    return (\n      <div className=\"fluid-container img-fluid\">\n      <Jumbotron />\n    \n      <div className=\"fluid-container\">\n        <Navbar\n          className=\"row\"\n          score={score}\n          topScore={topScore}\n          message={message}\n        />\n\n        <div className=\"d-flex justify-content-center main-content mx-auto padding-main flex-wrap row\">\n          {cards.map(({ id, name, image, clicked }) => (\n            <Card\n              key={id}\n              id={id}\n              name={name}\n              image={image}\n              clicked={clicked}\n              clickHandler={this.handleSaveClick}\n            />\n          ))}\n        </div>\n        \n        <div className=\"fluid-container\">\n          <Footer />\n        </div>\n      \n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}